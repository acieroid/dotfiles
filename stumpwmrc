;;;; -*- mode: Lisp; -*-
;;;; vim: ft=lisp
(in-package :stumpwm)

;;; General functions
(defun seq-butlast (seq &optional (n 1))
  "Equivalent to BUTLAST, but for a sequence"
  (subseq seq 0 (- (length seq) n)))

(defun multimedia-key (key action)
  "Define a multimedia key (bind it directly on *top-map*"
  (define-key *top-map* (kbd key) action))

(defvar *os* (intern (seq-butlast (run-shell-command "uname -s" t))))

;;; Slime
(require 'swank)
(defcommand swank () ()
  "Start swank"
  (setf *top-level-error-action* :break)
  (swank:create-server :port 4005
                      :style swank:*communication-style*
                      :dont-close t)
  (echo-string (current-screen) "Starting swank."))
(define-key *root-map* (kbd "C-s") "swank")

;;; Appearance
;; Input and message bar
(setf *message-window-gravity* :center)
(setf *input-window-gravity* :center)
(setf *timeout-wait* 1)
(set-bg-color "red")
(set-fg-color "white")
(set-unfocus-color "gray30")
;(set-font "-*-erusfont-medium-*-*-*-*-*-*-*-*-*-*-*")

;;; Navigation key bindings
(defun define-direction (key direction &optional (map *top-map*))
  (define-key map (kbd (format nil "s-~a" key))
    (format nil "move-focus ~a" direction))
  (define-key map (kbd (format nil "s-~a" (string-upcase key)))
    (format nil "move-window ~a" direction)))

(define-direction "c" "left")
(define-direction "r" "right")
(define-direction "s" "up")
(define-direction "t" "down")

(define-key *top-map* (kbd "s-p") "pull-hidden-previous")
(define-key *top-map* (kbd "s-n") "pull-hidden-next")
(define-key *top-map* (kbd "s-o") "fullscreen")

;;; Dynamic groups
(load (data-dir-file "dynamic-groups" "lisp"))

(defgroup "1" "\"" "1")
(defgroup "2" "guillemotleft" "2")
(defgroup "3" "guillemotright" "3")
(defgroup "4" "(" "4")
(defgroup "5" ")" "5")
(defgroup "6" "@" "6")
(defgroup "7" "+" "7")
(defgroup "8" "-" "8")
(defgroup "9" "/" "9")
(defgroup "0" "*" "0")

;; Use group "1" as default group
(setf *default-group-name* "1")
(add-group (current-screen) "1")
(let ((default-group (find-group (current-screen) "Default")))
  (when default-group
    (kill-group (find-group (current-screen) "Default")
                (find-group (current-screen) "1"))))

;;; Programs and keybindings
(defcommand screenshot (file whole-screen)
    ((:string "Save image to: ")
     (:y-or-n "Take the whole screen ? "))
  "Take a screenshot of the screen or a part of the screen"
  (run-shell-command
   (format nil "scrot ~:[--select ~; ~]~a" (first whole-screen) file)))

(defcommand mpd-status () ()
  "Display the current song"
  (message (run-shell-command "mpc status | head -1" t)))

(defcommand lock () ()
  "Lock the screen"
  (run-shell-command "xlock -mode blank -use3d -font \"-*-erusfont-*-*-*-*-*-*-*-*-*-*-*-*\" +description -info \" \" -fg grey55 -echokeys -echokey \"*\" +usefirst -icongeometry 0x0"))

(defcommand battery () ()
  "Show how much battery remains"
  (message (run-shell-command "acpi -b" t)))

(defcommand man (name)
    ((:string "Which man page do you want to consult ? "))
  (run-shell-command (concat "urxvtc -e man " name)))

(defcommand redshift () ()
  "Launch redshift"
  ;; TODO: check if it's already launched and kill it if its the case
  (run-shell-command "redshift -l 50.833:4.333 -m randr"))

(defvar *firefox-role* '(:role "browser"))
(push *firefox-role* *deny-map-request*)
(push *firefox-role* *deny-raise-request*)
(defcommand firefox () ()
  "Launch firefox"
  (run-or-raise "firefox" *firefox-role*))

;;; Keybindings
(define-key *top-map* (kbd "s-,") "exec")
(define-key *top-map* (kbd "s-;") "colon")
(define-key *top-map* (kbd "s-:") "eval")
(define-key *top-map* (kbd "s-Return") "exec urxvtc")
(define-key *top-map* (kbd "s-Q") "delete")
(define-key *top-map* (kbd "s-e") "emacs")
(define-key *top-map* (kbd "s-f") "firefox")
(multimedia-key "Print" "screenshot")

(multimedia-key "XF86AudioRaiseVolume" "exec amixer set Master 2dB+")
(multimedia-key "XF86AudioLowerVolume" "exec amixer set Master 2dB-")
(multimedia-key "XF86AudioMute" "exec amixer sset Master toggle")
(multimedia-key "XF86AudioNext" "exec mpc next")
(multimedia-key "XF86AudioPrev" "exec mpc prev")
(multimedia-key "XF86AudioPlay" "exec mpc toggle")
(multimedia-key "XF86Launch1" "time")
(multimedia-key "XF86Calculator" "time")
(multimedia-key "XF86Mail" "mpd-status")
(multimedia-key "XF86ScreenSaver" "lock")
(multimedia-key "XF86Battery" "battery")
(multimedia-key "XF86Sleep" "exec systemctl suspend")

(setf *mouse-focus-policy* :click)
